group 'kafka-connect-tennet'
version '1.0.1'

apply plugin: 'java'
apply plugin: 'scala'

apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: "com.github.maiflai.scalatest"
apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = 1.8

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.14"
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.4"
    }
}

ext {
    scalaMajorVersion = '2.11'
    scala = '2.11.7'
    scalaCheck = '1.11.1'
    scalaTest = '2.2.6'
    junit = '4.11'
    scalaLoggingVersion = '2.1.2'
    kafkaVersion = '0.10.0.1'
    avroVersion = '1.7.7'
    avro4sVersion = "1.6.0"
    confluentVersion = '3.0.1'
    scalajHttpVersion = "2.3.0"
    commonsCodecVersion = "1.10"
    mockitoVersion = '1.10.19'
}

repositories {
    mavenCentral()
    maven { url "http://packages.confluent.io/maven/" }
    maven { url "http://repo.typesafe.com/typesafe/releases/" }
}

configurations {
    provided
    compile.extendsFrom provided
}


dependencies {
    compile "org.scala-lang:scala-library:$scala"
    compile "org.scala-lang:scala-compiler:$scala"
    compile "com.typesafe.scala-logging:scala-logging-slf4j_$scalaMajorVersion:$scalaLoggingVersion"
    compile "org.scalaj:scalaj-http_$scalaMajorVersion:$scalajHttpVersion"
    compile "commons-codec:commons-codec:$commonsCodecVersion"

    provided "org.apache.kafka:connect-json:$kafkaVersion"
    provided "io.confluent:kafka-connect-avro-converter:$confluentVersion"
    provided "io.confluent:kafka-schema-registry:$confluentVersion"
    provided "org.apache.avro:avro:$avroVersion"

    testCompile "org.scalacheck:scalacheck_$scalaMajorVersion:$scalaCheck"
    testCompile "org.scalatest:scalatest_$scalaMajorVersion:$scalaTest"
    testCompile "junit:junit:$junit"
    testCompile "org.mockito:mockito-all:$mockitoVersion"

    testRuntime "org.pegdown:pegdown:1.6.0"

}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

jar {
    dependsOn configurations.runtime
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    jar.archiveName = "$project.name-$project.version-$confluentVersion-all.jar"
}
